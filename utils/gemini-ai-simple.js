// Simple and Secure Gemini AI Implementation
// Compatible with local development without external dependencies
// Now uses secure environment configuration

class SimpleGeminiAI {
  constructor() {
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
    this.isInitialized = false;
    this.apiKey = null;
    
    this.initializeSecurely();
  }
  
  initializeSecurely() {
    try {
      // Tentar carregar configura√ß√£o segura
      this.loadApiKey();
      this.isInitialized = true;
      
      console.log('ü§ñ Simple Gemini AI inicializado com sucesso (modelo: gemini-1.5-flash)');
      console.log('üîê API Key:', this.apiKey ? 'Carregada com seguran√ßa' : 'Usando fallback de desenvolvimento');
      
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Gemini AI:', error.message);
      this.isInitialized = false;
    }
  }
  
  loadApiKey() {
    // M√∫ltiplas fontes para m√°xima compatibilidade
    this.apiKey = 
      // 1. Vari√°vel de ambiente (produ√ß√£o)
      (typeof process !== 'undefined' && process.env && process.env.geminiApiKey) ||
      (typeof process !== 'undefined' && process.env && process.env.GEMINI_API_KEY) ||
      
      // 2. Vari√°vel global do browser (injetada durante build)
      (typeof window !== 'undefined' && window.GEMINI_API_KEY) ||
      
      // 3. Fallback para desenvolvimento local (apenas se n√£o estiver em produ√ß√£o)
      (!this.isProduction() ? 'AIzaSyDXFW0fdQRnFMC7jIAtHIqJFREF6sp7nMc' : null);
      
    if (!this.apiKey) {
      throw new Error('üö® API Key n√£o configurada! Configure a vari√°vel de ambiente geminiApiKey.');
    }
  }
  
  isProduction() {
    return (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production') ||
           (typeof window !== 'undefined' && window.NODE_ENV === 'production');
  }

  async generateContent(prompt, context = '') {
    if (!this.isInitialized) {
      throw new Error('Gemini AI n√£o foi inicializado corretamente');
    }

    try {
      const fullPrompt = context ? `${context}\n\n${prompt}` : prompt;
      
      console.log('üîç Iniciando chamada para API Gemini...');
      console.log('üìù Prompt:', fullPrompt.substring(0, 100) + '...');
      
      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }]
        })
      });

      console.log('üì° Resposta HTTP status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP detalhado:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Dados recebidos:', data);
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        const result = data.candidates[0].content.parts[0].text;
        console.log('‚úÖ Resposta gerada com sucesso!');
        return result;
      } else {
        console.error('‚ùå Estrutura de resposta inv√°lida:', data);
        throw new Error('Resposta inv√°lida da API');
      }
    } catch (error) {
      console.error('‚ùå Erro detalhado ao gerar conte√∫do:', error);
      console.error('‚ùå Stack trace:', error.stack);
      throw new Error(`Erro da IA: ${error.message}`);
    }
  }

  // An√°lise inteligente de recursos
  async analyzeResource(resource) {
    const prompt = `
    Analise este recurso de estudo e forne√ßa insights valiosos:

    **Recurso:**
    - T√≠tulo: ${resource.title}
    - Tipo: ${resource.type}
    - Provedor: ${resource.provider || 'N√£o especificado'}
    - URL: ${resource.url}

    **Forne√ßa uma an√°lise estruturada:**

    ## üìä **An√°lise Inteligente**
    
    **üéØ Relev√¢ncia:** [Nota de 1-10 e justificativa]
    
    **‚è±Ô∏è Tempo Estimado:** [Tempo necess√°rio para completar]
    
    **üìö N√≠vel de Dificuldade:** [Iniciante/Intermedi√°rio/Avan√ßado + explica√ß√£o]
    
    **üöÄ Pontos Fortes:**
    - [3-5 pontos principais]
    
    **üí° Dicas para Aproveitamento:**
    - [3-5 dicas pr√°ticas]
    
    **üîó Conecta com:**
    - [Outros t√≥picos relacionados]
    
    **üìà Impacto na Carreira:**
    [Como este recurso contribui para o crescimento profissional]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar quiz personalizado (mantido para compatibilidade)
  async generateQuiz(topic, difficulty = 'intermediate', questionCount = 5) {
    const prompt = `
    Crie um quiz pr√°tico sobre: ${topic}
    
    **Configura√ß√µes:**
    - Dificuldade: ${difficulty}
    - N√∫mero de quest√µes: ${questionCount}
    - Foco: Aplica√ß√£o pr√°tica e conhecimento real
    
    **Formato da resposta:**
    
    ## üß† **Quiz: ${topic}**
    
    **Quest√£o 1:**
    [Pergunta clara e pr√°tica]
    
    a) [Op√ß√£o A]
    b) [Op√ß√£o B]
    c) [Op√ß√£o C]
    d) [Op√ß√£o D]
    
    **Resposta:** [Letra correta]
    **Explica√ß√£o:** [Explica√ß√£o detalhada]
    
    [Repetir formato para todas as quest√µes]
    
    ## üìà **Pr√≥ximos Passos:**
    - [3 recomenda√ß√µes de estudo]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar tarefa interativa com m√∫ltipla escolha - 5 perguntas + 3 dificuldades progressivas
  async generateTask(topic, initialDifficulty = 'beginner') {
    console.log(`üéØ Gerando 5 perguntas progressivas sobre: ${topic}`);
    
    // Definir configura√ß√µes por dificuldade
    const difficultyConfigs = {
      'beginner': {
        name: 'Iniciante',
        description: 'Conceitos fundamentais e defini√ß√µes b√°sicas',
        complexity: 'Perguntas diretas sobre conceitos base, terminologia e princ√≠pios fundamentais',
        scenarios: 'Situa√ß√µes simples do dia a dia profissional',
        color: '#10b981'
      },
      'intermediate': {
        name: 'Intermedi√°rio',
        description: 'Aplica√ß√£o pr√°tica e an√°lise de cen√°rios',
        complexity: 'Perguntas sobre implementa√ß√£o, an√°lise de casos e tomada de decis√µes',
        scenarios: 'Cen√°rios reais de trabalho que exigem an√°lise e aplica√ß√£o de conhecimento',
        color: '#f59e0b'
      },
      'advanced': {
        name: 'Avan√ßado',
        description: 'Estrat√©gia, otimiza√ß√£o e resolu√ß√£o de problemas complexos',
        complexity: 'Perguntas sobre otimiza√ß√£o, arquitetura, lideran√ßa t√©cnica e resolu√ß√£o de problemas complexos',
        scenarios: 'Desafios de alta complexidade, decis√µes estrat√©gicas e cen√°rios de lideran√ßa t√©cnica',
        color: '#ef4444'
      }
    };

    // Gerar 5 perguntas progressivas (2 f√°ceis, 2 m√©dias, 1 dif√≠cil)
    const questionDistribution = [
      { difficulty: 'beginner', number: 1 },
      { difficulty: 'beginner', number: 2 },
      { difficulty: 'intermediate', number: 3 },
      { difficulty: 'intermediate', number: 4 },
      { difficulty: 'advanced', number: 5 }
    ];

    try {
      const questions = [];
      
      for (const questionConfig of questionDistribution) {
        const { difficulty, number } = questionConfig;
        const config = difficultyConfigs[difficulty];
        
        console.log(`üìù Gerando pergunta ${number}/5 (${config.name})...`);
        
        const prompt = `
Crie UMA pergunta elaborada e desafiadora sobre: **${topic}**

**N√çVEL:** ${config.name} (${config.description})
**COMPLEXIDADE:** ${config.complexity}
**CEN√ÅRIO:** ${config.scenarios}

**INSTRU√á√ïES ESPEC√çFICAS:**
- Pergunta ${number} de 5 (progress√£o de dificuldade)
- Crie uma pergunta que REALMENTE fa√ßa o usu√°rio pensar
- Use cen√°rios pr√°ticos e realistas do mercado de trabalho
- Alternativas devem ser plaus√≠veis mas com apenas UMA correta
- Evite perguntas √≥bvias ou muito diretas
- Foque em aplica√ß√£o pr√°tica e tomada de decis√£o

**FORMATO EXATO DA RESPOSTA:**
{
  "question": "[Pergunta elaborada e contextualizada]",
  "alternatives": [
    "[Alternativa A - detalhada e plaus√≠vel]",
    "[Alternativa B - detalhada e plaus√≠vel]", 
    "[Alternativa C - detalhada e plaus√≠vel]",
    "[Alternativa D - detalhada e plaus√≠vel]",
    "[Alternativa E - detalhada e plaus√≠vel]"
  ],
  "correct": [√çndice da alternativa correta: 0, 1, 2, 3 ou 4],
  "explanation": "[Explica√ß√£o detalhada da resposta correta e por que as outras est√£o incorretas]",
  "difficulty": "${difficulty}",
  "questionNumber": ${number},
  "topic": "${topic}"
}

**IMPORTANTE:** Responda APENAS com o JSON, sem texto adicional.
`;
        
        const response = await this.generateContent(prompt);
        
        try {
          // Extrair JSON da resposta
          const jsonMatch = response.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const questionData = JSON.parse(jsonMatch[0]);
            questions.push({
              ...questionData,
              difficulty,
              difficultyConfig: config,
              questionNumber: number,
              totalQuestions: 5
            });
            console.log(`‚úÖ Pergunta ${number} gerada com sucesso!`);
          } else {
            throw new Error('Formato JSON n√£o encontrado na resposta');
          }
        } catch (parseError) {
          console.warn(`‚ö†Ô∏è Erro ao processar pergunta ${number}, usando fallback...`);
          // Fallback com pergunta b√°sica
          questions.push(this.generateFallbackQuestion(topic, difficulty, number));
        }
      }
      
      console.log(`üéâ Todas as 5 perguntas geradas com sucesso!`);
      
      return {
        topic,
        totalQuestions: 5,
        questions,
        difficultyProgression: ['Iniciante', 'Iniciante', 'Intermedi√°rio', 'Intermedi√°rio', 'Avan√ßado'],
        metadata: {
          generatedAt: new Date().toISOString(),
          version: '2.0',
          type: 'progressive_quiz'
        }
      };
      
    } catch (error) {
      console.error('‚ùå Erro ao gerar tarefas:', error);
      // Retornar fallback completo
      return this.generateFallbackTaskSet(topic);
    }
  }

  // Gerar pergunta de fallback
  generateFallbackQuestion(topic, difficulty, questionNumber) {
    const difficultyConfigs = {
      'beginner': { name: 'Iniciante', color: '#10b981' },
      'intermediate': { name: 'Intermedi√°rio', color: '#f59e0b' },
      'advanced': { name: 'Avan√ßado', color: '#ef4444' }
    };
    
    const config = difficultyConfigs[difficulty];
    
    const fallbackQuestions = {
      beginner: {
        question: `Qual √© o conceito fundamental mais importante para entender ${topic}?`,
        alternatives: [
          `${topic} √© uma metodologia de desenvolvimento √°gil`,
          `${topic} √© uma ferramenta de an√°lise de dados essencial para tomada de decis√µes`,
          `${topic} √© apenas uma tend√™ncia passageira do mercado`,
          `${topic} √© exclusivamente usado em grandes corpora√ß√µes`,
          `${topic} √© uma linguagem de programa√ß√£o avan√ßada`
        ],
        correct: 1,
        explanation: `${topic} √© fundamentalmente uma ferramenta/conceito de an√°lise que permite tomada de decis√µes baseada em dados, sendo aplic√°vel em diversos contextos e tamanhos de empresa.`
      },
      intermediate: {
        question: `Em um cen√°rio real de trabalho, qual seria a melhor abordagem para implementar ${topic} em uma empresa de m√©dio porte?`,
        alternatives: [
          `Implementar tudo de uma vez sem planejamento para acelerar o processo`,
          `Come√ßar com um projeto piloto, validar os resultados e depois escalar gradualmente`,
          `Contratar apenas consultores externos sem envolver a equipe interna`,
          `Focar apenas nos aspectos t√©cnicos ignorando o impacto organizacional`,
          `Aguardar que a concorr√™ncia implemente primeiro para copiar a estrat√©gia`
        ],
        correct: 1,
        explanation: `A melhor pr√°tica √© sempre come√ßar com um projeto piloto para ${topic}, validar os resultados, aprender com os desafios e ent√£o escalar gradualmente, envolvendo a equipe interna no processo.`
      },
      advanced: {
        question: `Como l√≠der t√©cnico, qual estrat√©gia voc√™ adotaria para otimizar ${topic} em larga escala em uma organiza√ß√£o multinacional?`,
        alternatives: [
          `Padronizar uma √∫nica solu√ß√£o global ignorando diferen√ßas regionais`,
          `Permitir que cada regi√£o implemente sua pr√≥pria solu√ß√£o sem coordena√ß√£o`,
          `Criar um framework flex√≠vel com padr√µes globais e adapta√ß√µes locais espec√≠ficas`,
          `Terceirizar completamente a implementa√ß√£o para reduzir complexidade`,
          `Adiar a implementa√ß√£o at√© que uma solu√ß√£o perfeita seja encontrada`
        ],
        correct: 2,
        explanation: `Em organiza√ß√µes multinacionais, a melhor estrat√©gia para ${topic} √© criar um framework que balance padr√µes globais com flexibilidade para adapta√ß√µes locais, garantindo consist√™ncia mas respeitando necessidades regionais espec√≠ficas.`
      }
    };
    
    const fallback = fallbackQuestions[difficulty] || fallbackQuestions.intermediate;
    
    return {
      ...fallback,
      difficulty,
      difficultyConfig: config,
      questionNumber,
      totalQuestions: 5,
      topic,
      isFallback: true
    };
  }

  // Gerar conjunto completo de fallback
  generateFallbackTaskSet(topic) {
    console.log(`üîÑ Gerando conjunto de fallback para: ${topic}`);
    
    const questions = [
      this.generateFallbackQuestion(topic, 'beginner', 1),
      this.generateFallbackQuestion(topic, 'beginner', 2),
      this.generateFallbackQuestion(topic, 'intermediate', 3),
      this.generateFallbackQuestion(topic, 'intermediate', 4),
      this.generateFallbackQuestion(topic, 'advanced', 5)
    ];
    
    return {
      topic,
      totalQuestions: 5,
      questions,
      difficultyProgression: ['Iniciante', 'Iniciante', 'Intermedi√°rio', 'Intermedi√°rio', 'Avan√ßado'],
      metadata: {
        generatedAt: new Date().toISOString(),
        version: '2.0',
        type: 'progressive_quiz_fallback'
      },
      isFallback: true
    };
  }

  // M√©todo legacy mantido para compatibilidade (agora gera apenas 1 pergunta)
  async generateSingleTask(topic, difficulty = 'intermediate', questionNumber = 1, totalQuestions = 5) {
    console.log(`üìù Gerando pergunta individual: ${questionNumber}/${totalQuestions} sobre ${topic}`);
    
    const difficultyConfigs = {
      'beginner': {
        name: 'Iniciante',
        description: 'Conceitos fundamentais e defini√ß√µes b√°sicas',
        complexity: 'Perguntas diretas sobre conceitos base e terminologia',
        scenarios: 'Situa√ß√µes simples do dia a dia profissional'
      },
      'intermediate': {
        name: 'Intermedi√°rio',
        description: 'Aplica√ß√£o pr√°tica e an√°lise de cen√°rios',
        complexity: 'Perguntas sobre implementa√ß√£o e tomada de decis√µes',
        scenarios: 'Cen√°rios reais de trabalho com an√°lise'
      },
      'advanced': {
        name: 'Avan√ßado',
        description: 'Estrat√©gia e resolu√ß√£o de problemas complexos',
        complexity: 'Perguntas sobre otimiza√ß√£o e lideran√ßa t√©cnica',
        scenarios: 'Desafios complexos e decis√µes estrat√©gicas'
      }
    };
    
    const config = difficultyConfigs[difficulty] || difficultyConfigs['intermediate'];
    
    const prompt = `
Crie uma tarefa pr√°tica sobre: ${topic}

**Configura√ß√µes:**
- Dificuldade: ${config.name} (${config.description})
- Tipo: M√∫ltipla escolha com 5 alternativas (A, B, C, D, E)
- Quest√£o: ${questionNumber} de ${totalQuestions}
- Complexidade: ${config.complexity}
- Foco: ${config.scenarios}
    
    **IMPORTANTE: Responda APENAS com um JSON v√°lido no formato exato abaixo:**
    
    {
      "question": "[Pergunta ${config.name.toLowerCase()} e pr√°tica sobre ${topic}]",
      "alternatives": [
        "[Op√ß√£o A - clara e espec√≠fica]",
        "[Op√ß√£o B - clara e espec√≠fica]", 
        "[Op√ß√£o C - clara e espec√≠fica]",
        "[Op√ß√£o D - clara e espec√≠fica]",
        "[Op√ß√£o E - clara e espec√≠fica]"
      ],
      "correct": [√≠ndice da resposta correta: 0, 1, 2, 3 ou 4],
      "explanation": "[Explica√ß√£o detalhada de por que a resposta est√° correta, incluindo contexto pr√°tico e aplica√ß√£o no mercado de trabalho. Explique tamb√©m por que as outras alternativas est√£o incorretas.]",
      "difficulty": "${difficulty}",
      "questionNumber": ${questionNumber},
      "totalQuestions": ${totalQuestions}
    }
    
    **Contexto para ${topic} - N√≠vel ${config.name}:**
    - ${config.scenarios}
    - Use ferramentas e tecnologias espec√≠ficas da √°rea
    - Inclua m√©tricas, KPIs e resultados pr√°ticos quando aplic√°vel
    - Torne as 5 alternativas plaus√≠veis mas com apenas uma correta
    - Varie o tipo de pergunta: conceitual, pr√°tica, an√°lise, compara√ß√£o ou aplica√ß√£o
    
    **RESPONDA APENAS COM O JSON - N√ÉO ADICIONE TEXTO EXTRA**
    `;

    try {
      const response = await this.generateContent(prompt);
      
      // Clean response and try to parse JSON
      let cleanResponse = response.trim();
      
      // Remove any markdown code blocks if present
      cleanResponse = cleanResponse.replace(/```json\s*|```\s*/g, '');
      
      // Try to find JSON content
      const jsonMatch = cleanResponse.match(/\{[^}]*"question"[^}]*\}/s);
      if (jsonMatch) {
        cleanResponse = jsonMatch[0];
      }
      
      // Parse and validate JSON
      const taskData = JSON.parse(cleanResponse);
      
      // Validate required fields for 5 alternatives
      if (!taskData.question || !taskData.alternatives || !Array.isArray(taskData.alternatives) || 
          taskData.alternatives.length !== 5 || typeof taskData.correct !== 'number' || 
          taskData.correct < 0 || taskData.correct > 4 || !taskData.explanation) {
        throw new Error('JSON structure invalid - expected 5 alternatives');
      }
      
      // Ensure difficulty and question tracking
      taskData.difficulty = taskData.difficulty || difficulty;
      taskData.questionNumber = taskData.questionNumber || questionNumber;
      taskData.totalQuestions = taskData.totalQuestions || totalQuestions;
      
      console.log(`‚úÖ Tarefa gerada com sucesso (${questionNumber}/${totalQuestions} - ${difficulty}):`, taskData);
      return taskData;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao parsear JSON, usando fallback:', error);
      
      // Enhanced fallback with 5 alternatives and difficulty support
      const fallbackQuestions = {
        beginner: `Qual √© a defini√ß√£o b√°sica de ${topic}?`,
        intermediate: `Como ${topic} √© aplicado na pr√°tica profissional?`,
        advanced: `Qual estrat√©gia otimizada usar ao implementar ${topic} em larga escala?`
      };
      
      return {
        question: fallbackQuestions[difficulty] || `Qual √© a principal aplica√ß√£o de ${topic} no mercado de trabalho atual?`,
        alternatives: [
          `${topic} √© usado principalmente para an√°lise de dados`,
          `${topic} √© focado apenas em desenvolvimento web`,
          `${topic} serve exclusivamente para mobile`,
          `${topic} √© usado somente em intelig√™ncia artificial`,
          `${topic} n√£o tem aplica√ß√£o pr√°tica no mercado`
        ],
        correct: 0,
        explanation: `${topic} tem aplica√ß√µes diversas, mas sua principal for√ßa est√° na an√°lise e manipula√ß√£o de dados, sendo amplamente usado em empresas para extrair insights valiosos e tomar decis√µes baseadas em dados. As outras alternativas s√£o limitadas ou incorretas.`,
        difficulty: difficulty,
        questionNumber: questionNumber,
        totalQuestions: totalQuestions
      };
    }
  }

  // Mentor virtual personalizado
  async getMentorAdvice(question, userContext = '') {
    const prompt = `
    **Contexto do usu√°rio:** ${userContext}
    
    **Pergunta:** ${question}
    
    Como mentor especialista em tecnologia, forne√ßa um conselho personalizado e pr√°tico.
    
    **Estrutura da resposta:**
    
    ## üéØ **Resposta Direta**
    [Resposta clara e objetiva]
    
    ## üìö **Contexto e Fundamentos**
    [Explica√ß√£o mais detalhada]
    
    ## üöÄ **Plano de A√ß√£o**
    1. [Passo 1 - espec√≠fico e acion√°vel]
    2. [Passo 2 - espec√≠fico e acion√°vel]
    3. [Passo 3 - espec√≠fico e acion√°vel]
    
    ## üîó **Recursos Recomendados**
    - [Recurso 1 com justificativa]
    - [Recurso 2 com justificativa]
    - [Recurso 3 com justificativa]
    
    ## üí° **Dica Extra**
    [Insight adicional ou motiva√ß√£o]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar flashcards para estudo
  async generateFlashcards(topic, count = 10) {
    const prompt = `
    Crie ${count} flashcards sobre: ${topic}
    
    **Formato:**
    
    ## üé¥ **Flashcards: ${topic}**
    
    **Card 1:**
    **Frente:** [Pergunta ou conceito]
    **Verso:** [Resposta ou explica√ß√£o]
    
    **Card 2:**
    **Frente:** [Pergunta ou conceito]
    **Verso:** [Resposta ou explica√ß√£o]
    
    [Continuar para todos os cards]
    
    ## üìö **Dicas de Estudo:**
    - [3 dicas para usar os flashcards efetivamente]
    `;

    return await this.generateContent(prompt);
  }

  // Simulador de entrevista
  async simulateInterview(role, experience = 'intermediate') {
    const prompt = `
    Simule uma entrevista para a posi√ß√£o: ${role}
    N√≠vel de experi√™ncia: ${experience}
    
    **Gere 5 perguntas de entrevista realistas:**
    
    ## üé§ **Simula√ß√£o de Entrevista: ${role}**
    
    **Pergunta 1:**
    [Pergunta t√©cnica relevante]
    
    **Dicas para responder:**
    - [Dica 1]
    - [Dica 2]
    
    **Exemplo de resposta:**
    [Exemplo estruturado]
    
    ---
    
    [Repetir para 5 perguntas]
    
    ## üìà **Prepara√ß√£o Adicional:**
    - [3 √°reas para focar no estudo]
    `;

    return await this.generateContent(prompt);
  }
}

// Singleton instance
let geminiAI = null;

export const getSimpleGeminiAI = () => {
  if (!geminiAI) {
    geminiAI = new SimpleGeminiAI();
  }
  return geminiAI;
};

// Global export for non-module usage
window.getSimpleGeminiAI = getSimpleGeminiAI;

export default SimpleGeminiAI;
