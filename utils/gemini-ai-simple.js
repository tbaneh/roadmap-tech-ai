// Simple and Secure Gemini AI Implementation
// Compatible with local development without external dependencies

class SimpleGeminiAI {
  constructor() {
    this.apiKey = 'AIzaSyDXFW0fdQRnFMC7jIAtHIqJFREF6sp7nMc'; // Note: In production, use environment variables
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
    this.isInitialized = true;
    console.log('ü§ñ Simple Gemini AI inicializado com sucesso (modelo: gemini-1.5-flash)');
  }

  async generateContent(prompt, context = '') {
    if (!this.isInitialized) {
      throw new Error('Gemini AI n√£o foi inicializado corretamente');
    }

    try {
      const fullPrompt = context ? `${context}\n\n${prompt}` : prompt;
      
      console.log('üîç Iniciando chamada para API Gemini...');
      console.log('üìù Prompt:', fullPrompt.substring(0, 100) + '...');
      
      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }]
        })
      });

      console.log('üì° Resposta HTTP status:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Erro HTTP detalhado:', errorText);
        throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log('üì¶ Dados recebidos:', data);
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        const result = data.candidates[0].content.parts[0].text;
        console.log('‚úÖ Resposta gerada com sucesso!');
        return result;
      } else {
        console.error('‚ùå Estrutura de resposta inv√°lida:', data);
        throw new Error('Resposta inv√°lida da API');
      }
    } catch (error) {
      console.error('‚ùå Erro detalhado ao gerar conte√∫do:', error);
      console.error('‚ùå Stack trace:', error.stack);
      throw new Error(`Erro da IA: ${error.message}`);
    }
  }

  // An√°lise inteligente de recursos
  async analyzeResource(resource) {
    const prompt = `
    Analise este recurso de estudo e forne√ßa insights valiosos:

    **Recurso:**
    - T√≠tulo: ${resource.title}
    - Tipo: ${resource.type}
    - Provedor: ${resource.provider || 'N√£o especificado'}
    - URL: ${resource.url}

    **Forne√ßa uma an√°lise estruturada:**

    ## üìä **An√°lise Inteligente**
    
    **üéØ Relev√¢ncia:** [Nota de 1-10 e justificativa]
    
    **‚è±Ô∏è Tempo Estimado:** [Tempo necess√°rio para completar]
    
    **üìö N√≠vel de Dificuldade:** [Iniciante/Intermedi√°rio/Avan√ßado + explica√ß√£o]
    
    **üöÄ Pontos Fortes:**
    - [3-5 pontos principais]
    
    **üí° Dicas para Aproveitamento:**
    - [3-5 dicas pr√°ticas]
    
    **üîó Conecta com:**
    - [Outros t√≥picos relacionados]
    
    **üìà Impacto na Carreira:**
    [Como este recurso contribui para o crescimento profissional]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar quiz personalizado (mantido para compatibilidade)
  async generateQuiz(topic, difficulty = 'intermediate', questionCount = 5) {
    const prompt = `
    Crie um quiz pr√°tico sobre: ${topic}
    
    **Configura√ß√µes:**
    - Dificuldade: ${difficulty}
    - N√∫mero de quest√µes: ${questionCount}
    - Foco: Aplica√ß√£o pr√°tica e conhecimento real
    
    **Formato da resposta:**
    
    ## üß† **Quiz: ${topic}**
    
    **Quest√£o 1:**
    [Pergunta clara e pr√°tica]
    
    a) [Op√ß√£o A]
    b) [Op√ß√£o B]
    c) [Op√ß√£o C]
    d) [Op√ß√£o D]
    
    **Resposta:** [Letra correta]
    **Explica√ß√£o:** [Explica√ß√£o detalhada]
    
    [Repetir formato para todas as quest√µes]
    
    ## üìà **Pr√≥ximos Passos:**
    - [3 recomenda√ß√µes de estudo]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar tarefa interativa com m√∫ltipla escolha - 5 perguntas + 3 dificuldades
  async generateTask(topic, difficulty = 'intermediate', questionNumber = 1, totalQuestions = 5) {
    // Definir configura√ß√µes por dificuldade
    const difficultyConfigs = {
      'beginner': {
        name: 'Iniciante',
        description: 'Conceitos fundamentais e defini√ß√µes b√°sicas',
        complexity: 'Perguntas diretas sobre conceitos base, terminologia e princ√≠pios fundamentais',
        scenarios: 'Situa√ß√µes simples do dia a dia profissional'
      },
      'intermediate': {
        name: 'Intermedi√°rio', 
        description: 'Aplica√ß√£o pr√°tica e an√°lise de cen√°rios',
        complexity: 'Perguntas sobre implementa√ß√£o, an√°lise de casos e tomada de decis√µes',
        scenarios: 'Cen√°rios reais de trabalho que exigem an√°lise e aplica√ß√£o de conhecimento'
      },
      'advanced': {
        name: 'Avan√ßado',
        description: 'Estrat√©gia, otimiza√ß√£o e resolu√ß√£o de problemas complexos',
        complexity: 'Perguntas sobre otimiza√ß√£o, arquitetura, estrat√©gia e resolu√ß√£o de problemas complexos',
        scenarios: 'Situa√ß√µes enterprise, lideran√ßa t√©cnica e decis√µes arquiteturais'
      }
    };
    
    const config = difficultyConfigs[difficulty] || difficultyConfigs['intermediate'];
    
    const prompt = `
    Crie uma tarefa pr√°tica sobre: ${topic}
    
    **Configura√ß√µes:**
    - Dificuldade: ${config.name} (${config.description})
    - Tipo: M√∫ltipla escolha com 5 alternativas (A, B, C, D, E)
    - Quest√£o: ${questionNumber} de ${totalQuestions}
    - Complexidade: ${config.complexity}
    - Foco: ${config.scenarios}
    
    **IMPORTANTE: Responda APENAS com um JSON v√°lido no formato exato abaixo:**
    
    {
      "question": "[Pergunta ${config.name.toLowerCase()} e pr√°tica sobre ${topic}]",
      "alternatives": [
        "[Op√ß√£o A - clara e espec√≠fica]",
        "[Op√ß√£o B - clara e espec√≠fica]", 
        "[Op√ß√£o C - clara e espec√≠fica]",
        "[Op√ß√£o D - clara e espec√≠fica]",
        "[Op√ß√£o E - clara e espec√≠fica]"
      ],
      "correct": [√≠ndice da resposta correta: 0, 1, 2, 3 ou 4],
      "explanation": "[Explica√ß√£o detalhada de por que a resposta est√° correta, incluindo contexto pr√°tico e aplica√ß√£o no mercado de trabalho. Explique tamb√©m por que as outras alternativas est√£o incorretas.]",
      "difficulty": "${difficulty}",
      "questionNumber": ${questionNumber},
      "totalQuestions": ${totalQuestions}
    }
    
    **Contexto para ${topic} - N√≠vel ${config.name}:**
    - ${config.scenarios}
    - Use ferramentas e tecnologias espec√≠ficas da √°rea
    - Inclua m√©tricas, KPIs e resultados pr√°ticos quando aplic√°vel
    - Torne as 5 alternativas plaus√≠veis mas com apenas uma correta
    - Varie o tipo de pergunta: conceitual, pr√°tica, an√°lise, compara√ß√£o ou aplica√ß√£o
    
    **RESPONDA APENAS COM O JSON - N√ÉO ADICIONE TEXTO EXTRA**
    `;

    try {
      const response = await this.generateContent(prompt);
      
      // Clean response and try to parse JSON
      let cleanResponse = response.trim();
      
      // Remove any markdown code blocks if present
      cleanResponse = cleanResponse.replace(/```json\s*|```\s*/g, '');
      
      // Try to find JSON content
      const jsonMatch = cleanResponse.match(/\{[^}]*"question"[^}]*\}/s);
      if (jsonMatch) {
        cleanResponse = jsonMatch[0];
      }
      
      // Parse and validate JSON
      const taskData = JSON.parse(cleanResponse);
      
      // Validate required fields for 5 alternatives
      if (!taskData.question || !taskData.alternatives || !Array.isArray(taskData.alternatives) || 
          taskData.alternatives.length !== 5 || typeof taskData.correct !== 'number' || 
          taskData.correct < 0 || taskData.correct > 4 || !taskData.explanation) {
        throw new Error('JSON structure invalid - expected 5 alternatives');
      }
      
      // Ensure difficulty and question tracking
      taskData.difficulty = taskData.difficulty || difficulty;
      taskData.questionNumber = taskData.questionNumber || questionNumber;
      taskData.totalQuestions = taskData.totalQuestions || totalQuestions;
      
      console.log(`‚úÖ Tarefa gerada com sucesso (${questionNumber}/${totalQuestions} - ${difficulty}):`, taskData);
      return taskData;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao parsear JSON, usando fallback:', error);
      
      // Enhanced fallback with 5 alternatives and difficulty support
      const fallbackQuestions = {
        beginner: `Qual √© a defini√ß√£o b√°sica de ${topic}?`,
        intermediate: `Como ${topic} √© aplicado na pr√°tica profissional?`,
        advanced: `Qual estrat√©gia otimizada usar ao implementar ${topic} em larga escala?`
      };
      
      return {
        question: fallbackQuestions[difficulty] || `Qual √© a principal aplica√ß√£o de ${topic} no mercado de trabalho atual?`,
        alternatives: [
          `${topic} √© usado principalmente para an√°lise de dados`,
          `${topic} √© focado apenas em desenvolvimento web`,
          `${topic} serve exclusivamente para mobile`,
          `${topic} √© usado somente em intelig√™ncia artificial`,
          `${topic} n√£o tem aplica√ß√£o pr√°tica no mercado`
        ],
        correct: 0,
        explanation: `${topic} tem aplica√ß√µes diversas, mas sua principal for√ßa est√° na an√°lise e manipula√ß√£o de dados, sendo amplamente usado em empresas para extrair insights valiosos e tomar decis√µes baseadas em dados. As outras alternativas s√£o limitadas ou incorretas.`,
        difficulty: difficulty,
        questionNumber: questionNumber,
        totalQuestions: totalQuestions
      };
    }
  }

  // Mentor virtual personalizado
  async getMentorAdvice(question, userContext = '') {
    const prompt = `
    **Contexto do usu√°rio:** ${userContext}
    
    **Pergunta:** ${question}
    
    Como mentor especialista em tecnologia, forne√ßa um conselho personalizado e pr√°tico.
    
    **Estrutura da resposta:**
    
    ## üéØ **Resposta Direta**
    [Resposta clara e objetiva]
    
    ## üìö **Contexto e Fundamentos**
    [Explica√ß√£o mais detalhada]
    
    ## üöÄ **Plano de A√ß√£o**
    1. [Passo 1 - espec√≠fico e acion√°vel]
    2. [Passo 2 - espec√≠fico e acion√°vel]
    3. [Passo 3 - espec√≠fico e acion√°vel]
    
    ## üîó **Recursos Recomendados**
    - [Recurso 1 com justificativa]
    - [Recurso 2 com justificativa]
    - [Recurso 3 com justificativa]
    
    ## üí° **Dica Extra**
    [Insight adicional ou motiva√ß√£o]
    `;

    return await this.generateContent(prompt);
  }

  // Gerar flashcards para estudo
  async generateFlashcards(topic, count = 10) {
    const prompt = `
    Crie ${count} flashcards sobre: ${topic}
    
    **Formato:**
    
    ## üé¥ **Flashcards: ${topic}**
    
    **Card 1:**
    **Frente:** [Pergunta ou conceito]
    **Verso:** [Resposta ou explica√ß√£o]
    
    **Card 2:**
    **Frente:** [Pergunta ou conceito]
    **Verso:** [Resposta ou explica√ß√£o]
    
    [Continuar para todos os cards]
    
    ## üìö **Dicas de Estudo:**
    - [3 dicas para usar os flashcards efetivamente]
    `;

    return await this.generateContent(prompt);
  }

  // Simulador de entrevista
  async simulateInterview(role, experience = 'intermediate') {
    const prompt = `
    Simule uma entrevista para a posi√ß√£o: ${role}
    N√≠vel de experi√™ncia: ${experience}
    
    **Gere 5 perguntas de entrevista realistas:**
    
    ## üé§ **Simula√ß√£o de Entrevista: ${role}**
    
    **Pergunta 1:**
    [Pergunta t√©cnica relevante]
    
    **Dicas para responder:**
    - [Dica 1]
    - [Dica 2]
    
    **Exemplo de resposta:**
    [Exemplo estruturado]
    
    ---
    
    [Repetir para 5 perguntas]
    
    ## üìà **Prepara√ß√£o Adicional:**
    - [3 √°reas para focar no estudo]
    `;

    return await this.generateContent(prompt);
  }
}

// Singleton instance
let geminiAI = null;

export const getSimpleGeminiAI = () => {
  if (!geminiAI) {
    geminiAI = new SimpleGeminiAI();
  }
  return geminiAI;
};

// Global export for non-module usage
window.getSimpleGeminiAI = getSimpleGeminiAI;

export default SimpleGeminiAI;
